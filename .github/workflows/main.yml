name: widger-server pipe ECR

on:
    push: 
        branches:
            - main

jobs:
    build:
        name: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              id: checkout
              uses: actions/checkout@v4
              
            - name: configure node
              uses: actions/setup-node@v4
              with:
                node-version: 18
                
            # - name: install dependencies
            #   id: install-dependencies
            #   run: npm test

            - name: Configure AWS Credentials
              id: configure-aws-credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ vars.AWS_REGION }}

            - name: Login to AWS ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Set up docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3

            - name: Generate tag
              id: tag
              run: |
                SHA=$(echo $GITHUB_SHA | head -c7)
                echo "sha=$SHA" >> $GITHUB_OUTPUT

            - name: Build and push the image to AWS ECR
              uses: docker/build-push-action@v6
              with:
                context: .
                load: true
                cache-from: type=gha
                cache-to: type=gha,mode=max
                tags: | 
                  ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:test

            - name: Run Trivy vulnerability scanner
              id: run-trivi-scanner
              uses: aquasecurity/trivy-action@0.28.0
              with:
                  image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:test
                  format: 'table'
                  ignore-unfixed: true
                  vuln-type: 'os,library'
                  severity: 'CRITICAL,HIGH'

            - name: Build and push the image to AWS ECR
              uses: docker/build-push-action@v6
              with:
                context: .
                cache-from: type=gha
                push: true
                tags: | 
                  ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.tag.outputs.sha }}

            # - name: Build and push the image to AWS ECR
            #   id: build-and-push
            #   env:
            #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            #     ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
            #     IMAGE_TAG: ${{ steps.tag.outputs.SHA }}
            #   run: |
            #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


            - name: Render Amazon ECS task definition
              id: render-web-container
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: .aws/task-definition.json
                # task-definition-arn:  task-definition-arn
                # task-definition-family: task-definition-family-name 
                # task-definition-revision: task-definition-revision
                container-name: widget-server
                image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.tag.outputs.sha }}
                # environment-variables: "LOG_LEVEL=info"
                # secrets: "SECRET_KEY=arn:aws:ssm:region:0123456789:parameter/secret"
        
            # - name: Deploy to Amazon ECS service
            #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
            #   with:
            #     task-definition: ${{ steps.render-web-container.outputs.task-definition }}
            #     service: my-service
            #     cluster: my-cluster